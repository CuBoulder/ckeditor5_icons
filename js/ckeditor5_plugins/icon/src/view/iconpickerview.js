/**
 * @file contains the icon picker root view.
 * 
 * @typedef { import('../iconconfig').FontAwesomeVersion } FontAwesomeVersion
 * @typedef { import('../iconconfig').CategoryDefinition } CategoryDefinition
 * @typedef { import('../iconconfig').IconDefinition } IconDefinition
 */

import { View, FocusCycler } from 'ckeditor5/src/ui';
import { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';
import { getValidIconStyle } from '../iconutils';
import IconPickerFooter from './iconpickerfooter';
import IconPickerGrid from './iconpickergrid';
import IconPickerHeader from './iconpickerheader';

export default class IconPickerView extends View {
	/**
	 * Creates a new IconPickerView.
	 * 
	 * @param {Locale} locale
	 *   The locale.
	 * @param {FontAwesomeVersion} faVersion
	 *   The version of Font Awesome being used.
	 * @param {Object<string, CategoryDefinition>} faCategories
	 *   The Font Awesome category definitions.
	 * @param {Object<string, IconDefinition>} faIcons
	 *   The Font Awesome icon definitions.
	 * @param {string[]} faStyles
	 *   The enabled Font Awesome icon styles.
	 * @param {string[]?} recommendedIcons
	 *   The icons to display in the recommended category.
	 */
	constructor(locale, faVersion, faCategories, faIcons, faStyles, recommendedIcons) {
		super(locale);

		this.set('iconName', null);
		this.set('iconStyle', faStyles[0]);
		this.set('iconDefinition', null);

		const headerView = this.headerView = new IconPickerHeader(locale, faCategories, faStyles, recommendedIcons);
		const gridView = this.gridView = new IconPickerGrid(locale, faVersion);
		const footerView = this.footerView = new IconPickerFooter(locale, faVersion);
		const searchFieldView = this.searchFieldView = this.footerView.searchView.searchFieldView.fieldView;

		const items = this.items = this.createCollection();
		const focusTracker = this.focusTracker = new FocusTracker();
		const keystrokes = this.keystrokes = new KeystrokeHandler();

		this._focusCycler = new FocusCycler({
			focusables: items,
			focusTracker: focusTracker,
			keystrokeHandler: keystrokes,
			actions: {
				focusPrevious: 'shift + tab',
				focusNext: 'tab'
			}
		});

		this.setTemplate({
			tag: 'div',
			children: [headerView, gridView, footerView],
			attributes: {
				// Avoid focus loss when the user clicks the area of the grid that is not a button.
				// https://github.com/ckeditor/ckeditor5/pull/12319#issuecomment-1231779819
				tabindex: '-1'
			}
		});

		items.add(headerView.categoryDropdownView.buttonView);
		items.add(gridView);

		// === Events generated by the different subviews are handled here. ===

		// Handles the category change event from the header.
		this.listenTo(headerView, 'execute', (eventInfo, categoryName, categoryDefinition) => {
			this.set('iconName', null);
			this.set('iconDefinition', null);
			gridView.refresh(categoryName, categoryDefinition, faIcons);
			footerView.refresh(faStyles);
			this._stopTrackingFooterForm();
		});

		// Handles the icon selection event from the grid.
		this.listenTo(gridView, 'execute', (eventInfo, iconName, iconDefinition) => {
			this.set('iconName', iconName);
			this.set('iconStyle', getValidIconStyle(iconDefinition, this.iconStyle));
			this.set('iconDefinition', iconDefinition);
			footerView.refresh(faStyles);
			this._startTrackingFooterForm();
		});

		// Tracks the "Show more" button in the grid view.
		this.listenTo(gridView, 'expandPossible', (eventInfo, value) => {
			if (value)
				this._startTracking(gridView.expandButtonView);
			else this._stopTracking(gridView.expandButtonView);
		});

		// Handles the icon style change event.
		this.listenTo(footerView, 'search', (eventInfo, searchQuery) => {
			if (this.iconName) {
				this.set('iconName', null);
				this.set('iconDefinition', null);
				footerView.refresh(faStyles);
				this._stopTrackingFooterForm();
			}
			if (searchQuery) {
				gridView.refresh('_all', faCategories._all, faIcons, searchQuery);
				headerView.categoryDropdownView.buttonView.set('isVisible', false);
			} else {
				gridView.refresh(headerView.categoryName, headerView.categoryDefinition, faIcons);
				headerView.categoryDropdownView.buttonView.set('isVisible', true);
			}
		});

		// Handles the icon style change event.
		this.listenTo(footerView, 'changeStyle', (eventInfo, iconStyle) => {
			this.set('iconStyle', iconStyle);
			footerView.refresh(faStyles);
		});

		// Handles the icon insert cancel event.
		this.on('cancel', eventInfo => {
			if (focusTracker.isFocused)
				gridView.focus();
			this.set('iconName', null);
			this.set('iconDefinition', null);
			footerView.refresh(faStyles);
			this._stopTrackingFooterForm();
		});

		// Fires the icon insert cancel event if the Escape key is pressed with an icon selected.
		// If an icon is not selected or Escape is pressed twice, the default behavior is to close the icon picker.
		keystrokes.set('Esc', (data, cancel) => {
			if (this.iconName) {
				this.fire('cancel');
				cancel();
			}
		});

		// Binds values that need to be avaliable in the different subviews so they remain in sync with the main view.
		gridView.bind('iconName', 'iconStyle').to(this);
		footerView.bind('iconName', 'iconStyle', 'iconDefinition').to(this);

		// Ensures the `execute` and `cancel` events of the icon picker view fires when someone confirms an icon insert.
		footerView.delegate('execute', 'cancel').to(this);

		// Fires the initial event to populate the grid view.
		if (faCategories._recommended)
			headerView.fire('execute', '_recommended', faCategories._recommended);
		else headerView.fire('execute', '_all', faCategories._all);
	}

	/**
	 * Starts tracking a view's focus.
	 * 
	 * @param {View} view
	 *   The view to start tracking.
	 */
	_startTracking(view) {
		if (!this.items.has(view)) {
			this.items.add(view);
			this.focusTracker.add(view.element);
		}
	}

	/**
	 * Stops tracking a view's focus.
	 * 
	 * @param {View} view
	 *   The view to stop tracking.
	 */
	_stopTracking(view) {
		if (this.items.has(view)) {
			this.items.remove(view);
			this.focusTracker.remove(view.element);
		}
	}

	_startTrackingFooterForm() {
		this._stopTracking(this.footerView.searchView.searchFieldView.fieldView);
		this._startTracking(this.footerView.formView.styleDropdownView.buttonView);
		this._startTracking(this.footerView.formView.submitButtonView);
		this._startTracking(this.footerView.formView.cancelButtonView);
	}

	_stopTrackingFooterForm() {
		this._stopTracking(this.footerView.formView.styleDropdownView.buttonView);
		this._stopTracking(this.footerView.formView.submitButtonView);
		this._stopTracking(this.footerView.formView.cancelButtonView);
		this._startTracking(this.footerView.searchView.searchFieldView.fieldView);
	}

	/**
	 * @inheritdoc
	 */
	render() {
		super.render();

		this.focusTracker.add(this.headerView.categoryDropdownView.buttonView.element);
		this.focusTracker.add(this.gridView.element);

		// Start listening for the keystrokes coming from #element.
		this.keystrokes.listenTo(this.element);
	}

	/**
	 * @inheritdoc
	 */
	destroy() {
		super.destroy();

		this.focusTracker.destroy();
		this.keystrokes.destroy();
	}

	/**
	 * Focuses the first focusable in `items`.
	 */
	focus() {
		if (this.items.has(this.searchFieldView))
			this.searchFieldView.focus();
		else this.headerView.focus();
	}
}
